import os
import sys
sys.path.append(os.path.abspath(os.path.dirname(__file__) + "/.."))

from crewai import Crew, Task
from agents.acquisition import AcquisitionAgent
from agents.emailing import EmailingAgent
from agents.reporting import ReportingAgent
from agents.contenu import ContenuAgent
from agents.social_media import SocialMediaAgent
from agents.manager import ManagerAgent
from config.openai_config import generate_response  # ‚úÖ Import OpenAI

class ActiveSquareCrew:
    def __init__(self):
        # Initialisation des agents avec leur r√¥le et backstory
        self.agent_acquisition = AcquisitionAgent().agent
        self.agent_emailing = EmailingAgent().agent
        self.agent_reporting = ReportingAgent().agent
        self.agent_contenu = ContenuAgent().agent
        self.agent_social = SocialMediaAgent().agent
        self.agent_manager = ManagerAgent().agent

        # D√©finition des t√¢ches associ√©es aux agents
        self.task_acquisition = Task(
            description="Trouver et qualifier 100 leads par mois en utilisant LinkedIn Sales Navigator et Airtable.",
            agent=self.agent_acquisition,
            expected_output="Liste des 10 nouveaux leads qualifi√©s sous format JSON ou CSV."
        )

        self.task_emailing = Task(
            description="Envoyer des campagnes email personnalis√©es et optimiser les taux d‚Äôouverture et conversion.",
            agent=self.agent_emailing,
            expected_output="Deux versions d'un email de relance avec objets diff√©rents (A/B testing)."
        )

        self.task_reporting = Task(
            description="Analyser les performances des campagnes marketing et proposer des ajustements.",
            agent=self.agent_reporting,
            expected_output="Rapport synth√©tique des performances avec recommandations strat√©giques."
        )

        self.task_contenu = Task(
            description="Cr√©er des articles SEO, des carrousels pour r√©seaux sociaux et des scripts vid√©o.",
            agent=self.agent_contenu,
            expected_output="Article structur√©, 3 carrousels LinkedIn/Instagram, 1 email r√©sum√©, et un script vid√©o."
        )

        self.task_social = Task(
            description="Optimiser la publication des contenus et analyser l'engagement social.",
            agent=self.agent_social,
            expected_output="Liste des 5 posts optimis√©s, suggestions de nouveaux formats, et rapport de performance."
        )

        self.task_manager = Task(
            description="Superviser les campagnes et adapter les strat√©gies en fonction des performances.",
            agent=self.agent_manager,
            expected_output="Synth√®se des KPIs et ajustements strat√©giques pour am√©liorer les r√©sultats."
        )

        # Cr√©ation du Crew avec les agents et leurs t√¢ches
        self.crew = Crew(
            agents=[
                self.agent_acquisition,
                self.agent_emailing,
                self.agent_reporting,
                self.agent_contenu,
                self.agent_social,
                self.agent_manager
            ],
            tasks=[
                self.task_acquisition,
                self.task_emailing,
                self.task_reporting,
                self.task_contenu,
                self.task_social,
                self.task_manager
            ],
            llm=generate_response  # ‚úÖ On utilise OpenAI comme moteur LLM
        )

    # M√©thode pour ex√©cuter le workflow
    def run(self):
        print("üöÄ Lancement du CrewAI...")
        result = self.crew.kickoff()  # ‚úÖ Utilisation de kickoff() avec CrewAI 0.105.0
        print("‚úÖ R√©sultat :", result)

# Ex√©cution du workflow si ce fichier est lanc√© directement
if __name__ == "__main__":
    crew_instance = ActiveSquareCrew()
    crew_instance.run()
